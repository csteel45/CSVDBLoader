/* * @(#)AboutDialog.java *  * Copyright © 2007 TIBCO Software, Inc. All Rights Reserved. *  * This software is the confidential and proprietary information of TIBCO * Software, Inc. ("Confidential Information"). You shall not disclose such * Confidential Information and shall use it only in accordance with the terms * of the license agreement you entered into with TIBCO Software. *  * TIBCO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR * NON-INFRINGEMENT. TIBCO SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY * LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS * DERIVATIVES. *  * Copyright Version 1.0 */package com.fortmoon.cvsdbloader.ui;import java.awt.BorderLayout;import java.awt.Component;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.Insets;import java.awt.Point;import java.awt.Rectangle;import javax.swing.BoxLayout;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;/** *  * GUI help menu item. provides an About dialog box containing information about * the program, including, author, date, copyright, build label Program name, * build date, and a logo image. *  * @author Christopher Steel, Principal Architect - TIBCO * @version Aug 24, 2007 3:02:58 PM *  */public class AboutDialog extends javax.swing.JDialog {	private static final long serialVersionUID = 1L;	protected boolean fComponentsAdjusted = false;	protected String version;	protected String release;	protected String buildDate;	protected String programName;	protected String author;	protected String copyright;	protected String image;	protected JLabel nameLabel;	protected JLabel authorLabel;	protected JLabel versionLabel;	protected JLabel buildLabel;	protected JLabel releaseLabel;	protected JLabel copyrightLabel;	protected JLabel blankLabel1;	protected JLabel blankLabel2;	protected JButton iconButton;	protected ImageIcon icon;	javax.swing.JButton okButton = new javax.swing.JButton();	javax.swing.JPanel aboutPanel = new javax.swing.JPanel();	public AboutDialog(JFrame parent) {		super(parent);		setModal(true);		setSize(420, 200);		setMinimumSize(new Dimension(420, 180));// setVisible(false);		okButton.setText("OK");// okButton.requestDefaultFocus();		okButton.setActionCommand("OK");// okButton.setNextFocusableComponent(okButton);		JPanel mainPanel = new JPanel();		aboutPanel.setLayout(new BoxLayout(aboutPanel, BoxLayout.Y_AXIS));		nameLabel = new JLabel();		nameLabel.setFont(new Font(programName, Font.BOLD, 16));// nameLabel.setForeground(Color.blue);		blankLabel1 = new JLabel(" ");		authorLabel = new JLabel(author);		blankLabel2 = new JLabel(" ");		versionLabel = new JLabel("Version: " + version);		releaseLabel = new JLabel("Release: " + release);		buildLabel = new JLabel("Build Date: " + buildDate);		copyrightLabel = new JLabel(copyright);		iconButton = new JButton(icon);		iconButton.setBorderPainted(false);		iconButton.setRequestFocusEnabled(false);		aboutPanel.add(iconButton);		aboutPanel.add(nameLabel);		aboutPanel.add(blankLabel1);		aboutPanel.add(authorLabel);		aboutPanel.add(versionLabel);		aboutPanel.add(buildLabel);		aboutPanel.add(releaseLabel);		aboutPanel.add(blankLabel2);		aboutPanel.add(copyrightLabel);		aboutPanel.setMinimumSize(new Dimension(320, 180));		JPanel buttonPanel = new JPanel(new FlowLayout());		buttonPanel.add(okButton);		mainPanel.add(aboutPanel, BorderLayout.CENTER);		SymWindow aSymWindow = new SymWindow();		this.addWindowListener(aSymWindow);		SymAction lSymAction = new SymAction();		okButton.addActionListener(lSymAction);		okButton.setSelected(true);		this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);		this.getContentPane().add(mainPanel, BorderLayout.CENTER);	}	public AboutDialog(JFrame parent, String programName, String author) {		this(parent);		setProgramName(programName);		setAuthor(author);	}	public AboutDialog(JFrame parent, String programName, String author,			String version, String buildDate) {		this(parent, programName, author);		setVersion(version);		setBuildDate(buildDate);	}	public AboutDialog(JFrame parent, String programName, String author,			String version, String buildDate, String copyright) {		this(parent, programName, author, version, buildDate);		setCopyright(copyright);	}	public AboutDialog(JFrame parent, String programName, String author,			String version, String buildDate, String copyright, String release) {		this(parent, programName, author, version, buildDate, copyright);		setRelease(release);	}	public AboutDialog(JFrame parent, String programName, String author,			String version, String buildDate, String copyright, String release,			String image) {		this(parent, programName, author, version, buildDate, copyright,				release);		setImage(image);	}	@Override	public void setVisible(boolean b) {		if (b) {			nameLabel.setText(programName);			authorLabel.setText(author);			versionLabel.setText("Version: " + version);			buildLabel.setText("Build Date: " + buildDate);			releaseLabel.setText("Release: " + release);			copyrightLabel.setText(copyright);			try {				if (null != image) {					icon = new ImageIcon(getClass().getClassLoader().getResource(image));					if (icon != null) {						iconButton.setIcon(icon);						iconButton.setFocusable(false);					}				}			}			catch (Exception e) {			}			this.pack();			Rectangle bounds = (getParent()).getBounds();			Dimension size = getSize();			setLocation(bounds.x + (bounds.width - size.width) / 2, bounds.y					+ (bounds.height - size.height) / 2);		}		this.okButton.setSelected(true);		super.setVisible(b);	}	@Override	public void addNotify() {		// Record the size of the window prior to calling parents addNotify.		Dimension d = getSize();		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the insets		Insets insets = getInsets();		setSize(insets.left + insets.right + d.width, insets.top				+ insets.bottom + d.height);		Component components[] = getContentPane().getComponents();		for (Component element : components) {			Point p = element.getLocation();			p.translate(insets.left, insets.top);			element.setLocation(p);		}		fComponentsAdjusted = true;	}	public String getProgramName() {		return programName;	}	public void setProgramName(String programName) {		this.programName = programName;	}	public String getAuthor() {		return author;	}	public void setAuthor(String author) {		this.author = author;	}	public String getVersion() {		return version;	}	public void setVersion(String version) {		this.version = version;	}	public String getBuildDate() {		return buildDate;	}	public void setBuildDate(String buildDate) {		this.buildDate = buildDate;	}	public String getCopyright() {		return copyright;	}	public void setCopyright(String copyright) {		this.copyright = copyright;	}	public void setImage(String image) {		this.image = image;	}	public String getImage() {		return image;	}	class SymWindow extends java.awt.event.WindowAdapter {		@Override		public void windowClosing(java.awt.event.WindowEvent event) {			Object object = event.getSource();			if (object == AboutDialog.this)				jAboutDialog_windowClosing(event);		}	}	void jAboutDialog_windowClosing(java.awt.event.WindowEvent event) {		jAboutDialog_windowClosing_Interaction1(event);	}	void jAboutDialog_windowClosing_Interaction1(			java.awt.event.WindowEvent event) {		try {			this.setVisible(false);		}		catch (Exception e) {		}	}	class SymAction implements java.awt.event.ActionListener {		public void actionPerformed(java.awt.event.ActionEvent event) {			Object object = event.getSource();			if (object == okButton)				okButton_actionPerformed(event);		}	}	void okButton_actionPerformed(java.awt.event.ActionEvent event) {		okButton_actionPerformed_Interaction1(event);	}	void okButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {		try {			this.setVisible(false);		}		catch (Exception e) {		}	}	public void setRelease(String release) {		this.release = release;	}}